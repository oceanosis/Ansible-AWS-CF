{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AutoScale - LaunchConfig - LoadBalancer",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "Default": "Automation-Test"
    },
    "AvailabilityZones": {
    	"Description": "AZ List",
    	"Type": "CommaDelimitedList",
    	"Default": "us-east-1a,us-east-1b"
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "t2.micro"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "WebServerCapacity": {
      "Default": "2",
      "Description": "The initial number of WebServer instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "3",
      "ConstraintDescription": "must be between 1 and 3 EC2 instances."
    },
    "AdminEmail": {
      "Default": "dumluufuk@gmail.com",
      "Description": "E-Mail address to notify when any scaling operations are in course.",
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "Must be a valid email address."
    },
   "DBName" : {
     "Type": "String",
      "Default": "test"
    },

    "DBUser" : {
      "Type": "String",
      "Default": "admin"
    },

    "DBPassword" : {
       "Type": "String",
      "Default": "password"
    }
  },
  "Resources": {
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone" : "true",
         "SecurityGroups" : [ { "Ref" : "LoadBalancerSecurityGroup" } ],
        "Subnets" : [
	  {"Fn::ImportValue" : {"Fn::Sub" : "PublicSubnetID1a"}},
          {"Fn::ImportValue" : {"Fn::Sub" : "PublicSubnetID1b"}}
        ],
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "CookieBasedPolicy",
            "CookieExpirationPeriod": "30"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP",
            "PolicyNames": [
              "CookieBasedPolicy"
            ]
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/index.php",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "10",
          "Timeout": "5"
        }
      }
    },
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 locked down to the ELB and SSH access",
	"VpcId": {"Fn::ImportValue" : {"Fn::Sub" : "VpcId"}},
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "10.0.0.0/16"
          }]
      }
    },
    "LoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access on port 80",
	"VpcId": {"Fn::ImportValue" : {"Fn::Sub" : "VpcId"}},
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ],
        "SecurityGroupEgress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
          "Endpoint": { "Ref": "AdminEmail" },
          "Protocol": "email"
        }]
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones" : [
	  "us-east-1a","us-east-1b"
        ],
        "VPCZoneIdentifier" : [
          {"Fn::ImportValue" : {"Fn::Sub" : "PublicSubnetID1a"}},
          {"Fn::ImportValue" : {"Fn::Sub" : "PublicSubnetID1b"}}
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": "2",
        "MaxSize": "3",
        "DesiredCapacity": {
          "Ref": "WebServerCapacity"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ],
	"NotificationConfigurations" : [{
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        }],
        "Tags" : [ {
          "Key" : "Network",
          "Value" : "Private",
          "PropagateAtLaunch" : "true"
        }, {
          "Key" : "Name",
          "Value" : "WebServer",
          "PropagateAtLaunch" : "true"
        } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M",
          "Count"   : { "Ref" : "WebServerCapacity" }
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      },
      "DependsOn" : "ElasticLoadBalancer"
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "LaunchConfig": {
        "Type": "AWS::AutoScaling::LaunchConfiguration",
        "Properties": {
            "ImageId": "ami-6057e21a",
            "InstanceType": {
              "Ref": "InstanceType"
            },
    	      "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
            "KeyName": {
              "Ref": "KeyName"
            },
            "UserData": {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash -xe\n",
                		"yum -y update\n",
                		"yum -y install python-pip\n",
                		"pip install pystache \n",
                		"pip install argparse\n",
                		"pip install python-daemon\n",
                		"pip install requests\n",
                    "yum install -y aws-apitools-cfn\n",
                    "yum update -y aws-cfn-bootstrap\n",
                     
                    "# Install the files and packages from the metadata\n",
                     "/opt/aws/bin/cfn-init -v ",
                     "         --stack ", { "Ref" : "AWS::StackName" },
                     "         --resource LaunchConfig ",
		     "         --configsets InstallAndRun ",
                     "         --region ", { "Ref" : "AWS::Region" }, "\n",
        
                     "# Signal the status from cfn-init\n",
                     "/opt/aws/bin/cfn-signal -e $?",
                     "         --stack ", { "Ref" : "AWS::StackName" },
                     "         --resource WebServerGroup ",
                     "         --region ", { "Ref" : "AWS::Region" }, "\n"
                  ]
                ]
              }
            }
        },
      "Metadata": {
        "Comment1" : "Install the Apache Web Server, PHP and Deploy MyBB",
        "AWS::CloudFormation::Init": {
          "configSets" : {
            "InstallAndRun" : [ "Install", "Configure" , "MonAgent" ]
          },
         "Install" : {
           "packages" : {
              "yum": {
                "httpd": [],
                "php": [],
                "php-mysql": [],
                "php-gd": [],
                "php-pear": [],
                "mysql57": [],
                "MySQL-python27": [],
                "git": []
               }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
               "content": {
                "Fn::Join": [
                  "",
                  [
                    "[main]\n",
                    "stack=",{ "Ref": "AWS::StackId" }, "\n","region=", {"Ref": "AWS::Region" },
		    " resource=LaunchConfig configsets=InstallAndRun ",
                    "\n"
                  ]
                ]
              },
              "mode": "000400",
              "owner": "root",
              "group": "root"
             },
             "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
              "content": {
                "Fn::Join": [
                  "",
                  [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "         --resource LaunchConfig ",
                    "         --configsets InstallAndRun ",
                    "         --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "\n",
                    "runas=root\n"
                  ]
                ]
               }
             }
	  },
 	  "sources" : {
	  	"/usr/local/src" : "https://github.com/oceanosis/mybb/tarball/master"
	  },
          "commands": {
            "02) Unpack 'mybb_ready.tar.gz' file into its application directory": {
              "command": "tar xf /usr/local/src/mybb_ready.tar -C /var/www/html"
            },
            "03) Set 'apache' user and group as mybb directory owners": {
              "command": "chown -R apache.apache /var/www/html"
            },
            "04) Restore mybb-dump.sql if database is empty": {
              "command": {
                "Fn::Join": [
                  "",
                  [
                    "count=$(mysql",
                    " -h", {"Fn::ImportValue": {"Fn::Sub": "Endpoint" }},
                    " -u", {"Ref": "DBUser" },
                    " -p", {"Ref": "DBPassword"                    },
                    " -e 'SELECT COUNT(DISTINCT table_name) FROM information_schema.columns WHERE table_schema = \"", {"Ref": "DBName"},"\";'",
                    " | awk '{print $1}' | tail -1);",
                    " if [ ${count} -eq 0 ]; then",
                    " sed -i 's/ENDPOINT_URL/",
                    {
                      "Fn::GetAtt": [
                        "ElasticLoadBalancer",
                        "DNSName"
                      ]
                    },
                    "/g' /usr/local/src/mybb_dump.sql;",
                    " mysql",
                    " -h", {
                      "Fn::ImportValue": {
                        "Fn::Sub": "Endpoint"
                      }
                    },
                    " -u", {"Ref": "DBUser" },
                    " -p", {"Ref": "DBPassword"},
                    " ",
                    {
                      "Ref": "DBName"
                    },
                    " < /usr/local/src/mybb_dump.sql;",
                    " fi"
                  ]
                ]
              }
            }
           }
          },
         "MonAgent" : {
	   
	   "commands": {
            "02) Add Host ": {
              "command": "yum --enablerepo=epel install zabbix-agent -y"
		},
            "03) Add Host ": {
              "command": "HOST=$(curl http://169.254.169.254/latest/meta-data/local-hostname) && sed -i 's/.*Hostname=.*/Hostname='$HOST'/g' /etc/zabbix/zabbix_agentd.conf"
            },
            "04) Add Host IP" : {
              "command": "IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4) && sed -i 's/.*Server=.*/Server='$IP'/g' /etc/zabbix/zabbix_agentd.conf"
            },
            "05) Start Agent" : {
              "command": "chkconfig --add zabbix-agent && service zabbix-agent start"
            }
           },
	   "services" : {
   	    "sysvinit" : {
             "zabbix-agent" : {
	      "enabled" : "true",
	      "ensureRunning" : "true"
	       }
	     }
	    }
	  },
          "Configure" : {
            "commands": {
            "01) Set DATABASE in 'config.php' file": {
              "command": {
                "Fn::Join": [
                  "",
                  [
                    "sed -i -e 's/DATABASE/",
                    {
                      "Ref": "DBName"
                    },
                    "/g' /var/www/html/inc/config.php"
                  ]
                ]
              }
            },
            "02) Set HOSTNAME in 'config.php'": {
              "command": {
                "Fn::Join": [
                  "",
                  [
                    "sed -i -e 's/HOSTNAME/",
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": "Endpoint"
                      }
                    },
                    "/g' /var/www/html/inc/config.php"
                  ]
                ]
              }
            },
            "03) Set USERNAME in 'config.php'": {
              "command": {
                "Fn::Join": [
                  "",
                  [
                    "sed -i -e 's/USERNAME/",
                    {
                      "Ref": "DBUser"
                    },
                    "/g' /var/www/html/inc/config.php"
                  ]
                ]
              }
            },
            "04) Set PASSWORD into 'config.php'": {
              "command": {
                "Fn::Join": [
                  "",
                  [
                    "sed -i -e 's/PASSWORD/",
                    {
                      "Ref": "DBPassword"
                    },
                    "/g' /var/www/html/inc/config.php"
                  ]
                ]
              }
            },
            "05) Set ELB URL in 'settings.php'": {
              "command": {
                "Fn::Join": [
                  "",
                  [
                    "sed -i -e 's/ENDPOINT_URL/",
                    {
                      "Fn::GetAtt": [
                        "ElasticLoadBalancer",
                        "DNSName"
                      ]
                    },
                    "/g' /var/www/html/inc/settings.php"
                  ]
                ]
              }
            }
          },
          "services": {
            "sysvinit": {
              "httpd": {
                "enabled": "true",
                "ensureRunning": "true"
              },
              "cfn-hup": {
                "enabled": "true",
                "ensureRunning": "true",
                "files": [
                  "/etc/cfn/cfn-hup.conf",
                  "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                ]
              }
            }
          }
        }
      }
	}
	}
  },
  "Outputs": {
    "ELBSiteURL": {
      "Description": "ELB URL for myBB Servers",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    }
  }
}
